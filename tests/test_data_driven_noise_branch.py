import argparse
from astropy.time import Time
import logging
import matplotlib.pyplot as plt
import numpy as np
from NuRadioReco.framework.event import Event
from NuRadioReco.framework.station import Station
from NuRadioReco.framework.channel import Channel
from NuRadioReco.detector import detector
from NuRadioReco.modules.channelGenericNoiseAdder import channelGenericNoiseAdder
from NuRadioReco.utilities import units

parser  =argparse.ArgumentParser()
parser.add_argument("--station", "-s", type=int, default=11)
parser.add_argument("--channel", "-c", type=int, default=0)
args = parser.parse_args()

def create_sim_event(station_id, channel_id, detector, frequencies, sampling_rate):
    event = Event(run_number=-1, event_id=-1)
    station = Station(station_id)
    station.set_station_time(detector.get_detector_time())
    channel = Channel(channel_id)
    channel.set_frequency_spectrum(np.zeros_like(frequencies, dtype=np.complex128), sampling_rate)
    station.add_channel(channel)
    event.set_station(station)
    return event, station


log_level = logging.DEBUG

det = detector.Detector(source="rnog_mongo",
                        always_query_entire_description=False,
                        database_connection="RNOG_public",
                        select_stations=args.station,
                        log_level=log_level)
det.update(Time("2023-08-01"))

nr_samples = 2048
sampling_rate = 3.2 * units.GHz
frequencies = np.fft.rfftfreq(nr_samples, d=1./sampling_rate)

scale_parameter_dir = "/home/ruben/Downloads"
generic_noise_adder = channelGenericNoiseAdder()
generic_noise_adder.begin(scale_parameter_dir=scale_parameter_dir)

nr_of_sims = 100000
frequency_spectrum_mean = np.zeros_like(frequencies, dtype=np.complex128)
for _ in range(nr_of_sims):
    noise = generic_noise_adder.bandlimited_noise(0, 1.6, nr_samples, sampling_rate, amplitude=None, type="data-driven", time_domain=False,
                                                  station_id=args.station, channel_id=args.channel)

    frequency_spectrum_mean += np.abs(noise)

frequency_spectrum_mean /= nr_of_sims
plt.style.use("gaudi")
plt.plot(frequencies, np.abs(frequency_spectrum_mean))
plt.xlabel("freq / GHz")
plt.ylabel("spectral amplitude / V/GHz")
plt.title(f"Mean spectrum of {nr_of_sims} noise spectra \n generated by channelGenericNoiseAdder.bandlimited_noise(type='data-driven')")
plt.show()